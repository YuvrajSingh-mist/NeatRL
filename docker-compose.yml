
version: '3.8'

services:
  redis:
    image: redis:7
    env_file: .env
    command: >
      sh -c "redis-server --save 900 1 --save 300 10 --save 60 10000 
             --loglevel notice --maxmemory 256mb --maxmemory-policy allkeys-lru
             --bind 0.0.0.0
             --disable-command-security-warnings yes"
    ports:
      - "6379:6379"
    networks:
      - rl-net

  api:
    build:
      context: .
      dockerfile: app/api/Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./app:/home/appuser/app
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_BUCKET=${SUPABASE_BUCKET}
      - SERVICE_NAME=${SERVICE_NAME}
      - PROMETHEUS_MULTIPROC_DIR=/home/appuser/prom_metrics
      # Sentry removed; logs go to stdout and Promtail ships to Loki
    depends_on:
      - redis
    networks:
      - rl-net
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request,sys; sys.exit(0 if urllib.request.urlopen(\"http://localhost:8000/health\", timeout=5).status==200 else 1)' "]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 1.1.1.1

  worker:
    build:
      context: .
      dockerfile: app/worker/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
      x-bake:
        # platforms:
        #   - linux/amd64
    command:
      - sh
      - -lc
      - |
        exec celery -A app.core.celery.celery_app worker --loglevel=info -P prefork -c 3 -Q celery
    volumes:
      - ./app:/home/appuser/app
      - ./worker:/home/appuser/worker
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_BUCKET=${SUPABASE_BUCKET}
      - DOCKER_HOST=${DOCKER_HOST}
      - WORKER_METRICS_PORT=${WORKER_METRICS_PORT}
      - PROMETHEUS_MULTIPROC_DIR=/home/appuser/prom_metrics
      - SERVICE_NAME=${SERVICE_NAME}
      # - ALERTMANAGER_SMTP_PASSWORD_FILE=${ALERTMANAGER_SMTP_PASSWORD_FILE}
      - VISITOR_JWT_SECRET=${VISITOR_JWT_SECRET}
    depends_on:
      - api
    networks:
      - rl-net
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping", "--timeout=5"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    dns:
      - 8.8.8.8
      - 1.1.1.1

  worker-heavy:
    build:
      context: .
      dockerfile: app/worker/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command:
      - sh
      - -lc
      - |
        exec celery -A app.core.celery.celery_app worker --loglevel=info -P prefork -c 2 -Q heavy,celery
    volumes:
      - ./app:/home/appuser/app
      - ./worker:/home/appuser/worker
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_BUCKET=${SUPABASE_BUCKET}
      - DOCKER_HOST=${DOCKER_HOST}
      - WORKER_METRICS_PORT=${WORKER_METRICS_PORT}
      - PROMETHEUS_MULTIPROC_DIR=/home/appuser/prom_metrics
      - SERVICE_NAME=${SERVICE_NAME}
      - VISITOR_JWT_SECRET=${VISITOR_JWT_SECRET}
    depends_on:
      - api
    networks:
      - rl-net
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping", "--timeout=5"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    dns:
      - 8.8.8.8
      - 1.1.1.1

  # evaluator:
  #   image: rl-evaluator:latest
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.evaluator
  #   # platform: linux/arm64
  #   profiles:
  #     - evaluator
  evaluator-gpu:
    image: rl-evaluator-gpu:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.evaluator.gpu
    # This line is crucial. '4g' is a good starting point.
    shm_size: '4g' 
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all # 'all' is often simpler than specifying a count
              capabilities: [gpu]
    profiles:
      - evaluator
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    command: python /home/appuser/frontend/gradio_app.py
    ports:
      - "7860:7860"
    volumes:
      - ./frontend:/home/appuser/frontend
    environment:
    # RUN pip install --no-cache-dir torch==2.1.0 --index-url https://download.pytorch.org/whl/cu121
      - API_URL=${API_URL}
    depends_on:
      - api
    networks:
      - rl-net
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request,sys; sys.exit(0 if urllib.request.urlopen(\"http://localhost:7860\", timeout=5).status==200 else 1)' "]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=${REDIS_COMMANDER_HOSTS}
      - HTTP_PORT=${REDIS_COMMANDER_HTTP_PORT}
      - REDIS_CONNECTION_MODE=${REDIS_CONNECTION_MODE}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - rl-net

  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=${REDIS_ADDR}
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - rl-net

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=365d
    ports:
      - "9090:9090"
    depends_on:
      - api
      - worker
    networks:
      - rl-net

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    env_file: .env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./scripts/grafana_user_provision.sh:/docker-entrypoint-initgrafana.d/10-create-user.sh:ro
    depends_on:
      - prometheus
      - loki
    networks:
      - rl-net

  grafana-init:
    image: curlimages/curl:8.5.0
    command: sh /init/10-create-user.sh
    env_file: .env
    environment:
      - GRAFANA_URL=${GRAFANA_URL}
    volumes:
      - ./scripts/grafana_user_provision.sh:/init/10-create-user.sh:ro
    depends_on:
      - grafana
    networks:
      - rl-net
    restart: "no"
    
  alertmanager:
    image: prom/alertmanager:latest
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/data
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - ${ALERTMANAGER_SMTP_PASSWORD_FILE}:/run/secrets/alertmanager_smtp_password:ro
      - alertmanager_data:/data
    ports:
      - "9093:9093"
    user: "0:0"
    networks:
      - rl-net
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:2.9.5
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    networks:
      - rl-net

  promtail:
    image: grafana/promtail:2.9.5
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - promtail_positions:/tmp
    networks:
      - rl-net
    depends_on:
      - loki

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    command:
      - --config.file=/etc/blackbox/blackbox.yml
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox/blackbox.yml:ro
    ports:
      - "9115:9115"
    networks:
      - rl-net

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - rl-net

volumes:
  prometheus_data:
  loki_data:
  promtail_positions:
  alertmanager_data:
  grafana_data:

networks:
  rl-net:
    driver: bridge
